# Generated by Django 3.2.25 on 2024-05-01 13:08

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):
    dependencies = [
        ("nautobot_device_lifecycle_mgmt", "0025_migrate_soft_references_p2"),
    ]

    def nullify_software_fields(apps, schema_editor):
        """
        Nullify fields holding Software references.
        """
        ValidatedSoftware = apps.get_model("nautobot_device_lifecycle_mgmt", "ValidatedSoftwareLCM")
        DeviceSoftwareValidationResult = apps.get_model(
            "nautobot_device_lifecycle_mgmt", "DeviceSoftwareValidationResult"
        )
        InventoryItemSoftwareValidationResult = apps.get_model(
            "nautobot_device_lifecycle_mgmt", "InventoryItemSoftwareValidationResult"
        )
        CVE = apps.get_model("nautobot_device_lifecycle_mgmt", "CVELCM")
        Vulnerability = apps.get_model("nautobot_device_lifecycle_mgmt", "VulnerabilityLCM")

        for validated_software in ValidatedSoftware.objects.all():
            validated_software.software = None
            validated_software.save()

        for device_soft_val_res in DeviceSoftwareValidationResult.objects.all():
            if device_soft_val_res.software:
                device_soft_val_res.software = None
                device_soft_val_res.save()

        for invitem_soft_val_res in InventoryItemSoftwareValidationResult.objects.all():
            if invitem_soft_val_res.software:
                invitem_soft_val_res.software = None
                invitem_soft_val_res.save()

        for vuln in Vulnerability.objects.all():
            if vuln.software:
                vuln.software = None
                vuln.save()

        for cve in CVE.objects.all():
            cve.affected_softwares.clear()
            cve.save()

    def migrate_dlm_software_references(apps, schema_editor):
        """
        Map migrated DLM Software references to corresponding Core SoftwareVersion ones.
        """
        SoftwareLCM = apps.get_model("nautobot_device_lifecycle_mgmt", "SoftwareLCM")
        ValidatedSoftwareLCM = apps.get_model("nautobot_device_lifecycle_mgmt", "ValidatedSoftwareLCM")
        DeviceSoftwareValidationResult = apps.get_model(
            "nautobot_device_lifecycle_mgmt", "DeviceSoftwareValidationResult"
        )
        InventoryItemSoftwareValidationResult = apps.get_model(
            "nautobot_device_lifecycle_mgmt", "InventoryItemSoftwareValidationResult"
        )
        CVE = apps.get_model("nautobot_device_lifecycle_mgmt", "CVELCM")
        Vulnerability = apps.get_model("nautobot_device_lifecycle_mgmt", "VulnerabilityLCM")
        TaggedItem = apps.get_model("extras", "TaggedItem")

        # Core Software objects will have a tag of corresponding DLM Software that was created by the migration job.
        dlm_soft_to_core_soft = {}
        for software in SoftwareLCM.objects.all():
            dlm_soft_tag = f"DLM_migration-SoftwareLCM__{software.id}"
            core_soft_ti = TaggedItem.objects.get(tag__name=dlm_soft_tag)
            dlm_soft_to_core_soft[str(software.id)] = core_soft_ti.object_id
            software.save()

        for validated_software in ValidatedSoftwareLCM.objects.all():
            validated_software.software_id = dlm_soft_to_core_soft[str(validated_software.software_tmp)]
            validated_software.save()

        for device_soft_val_res in DeviceSoftwareValidationResult.objects.all():
            if device_soft_val_res.software_tmp:
                device_soft_val_res.software_id = dlm_soft_to_core_soft[str(device_soft_val_res.software_tmp)]
                device_soft_val_res.save()

        for invitem_soft_val_res in InventoryItemSoftwareValidationResult.objects.all():
            if invitem_soft_val_res.software_tmp:
                invitem_soft_val_res.software_id = dlm_soft_to_core_soft[str(invitem_soft_val_res.software_tmp)]
                invitem_soft_val_res.save()

        for cve in CVE.objects.all():
            softwares = [dlm_soft_to_core_soft[soft_id] for soft_id in cve.software_tmp]
            cve.affected_softwares.set(softwares)
            cve.save()

        for vuln in Vulnerability.objects.all():
            if vuln.software_tmp:
                vuln.software_id = dlm_soft_to_core_soft[str(vuln.software_tmp)]
                vuln.save()

    def delete_migrated_dlm_objects(apps, schema_editor):
        """
        Delete migrated DLM objects and objects created by the migration job.
        """
        ContactLCM = apps.get_model("nautobot_device_lifecycle_mgmt", "ContactLCM")
        SoftwareLCM = apps.get_model("nautobot_device_lifecycle_mgmt", "SoftwareLCM")
        SoftwareImageLCM = apps.get_model("nautobot_device_lifecycle_mgmt", "SoftwareImageLCM")
        Tag = apps.get_model("extras", "Tag")
        Relationship = apps.get_model("extras", "Relationship")

        # Delete DLM relationships from software to devices and inventory items
        Relationship.objects.filter(key="device_soft").delete()
        Relationship.objects.filter(key="inventory_item_soft").delete()

        # Delete DLM SoftwareLCM, SoftwareImageLCM and ContactLCM instances
        ContactLCM.objects.all().delete()
        SoftwareLCM.objects.all().delete()
        SoftwareImageLCM.objects.all().delete()

        # Delete tags created by migration Job. These are no longer needed.
        Tag.objects.filter(name__istartswith="DLM_migration-ContactLCM").delete()
        Tag.objects.filter(name__istartswith="DLM_migration-SoftwareLCM").delete()
        Tag.objects.filter(name__istartswith="DLM_migration-SoftwareImageLCM").delete()
        Tag.objects.filter(name="dlm-migration-manual-hash").delete()

    operations = [
        migrations.RunPython(nullify_software_fields),
        migrations.AlterField(
            model_name="cvelcm",
            name="affected_softwares",
            field=models.ManyToManyField(blank=True, related_name="corresponding_cves", to="dcim.softwareversion"),
        ),
        migrations.AlterField(
            model_name="devicesoftwarevalidationresult",
            name="software",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="+",
                to="dcim.softwareversion",
            ),
        ),
        migrations.AlterField(
            model_name="inventoryitemsoftwarevalidationresult",
            name="software",
            field=models.ForeignKey(
                blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to="dcim.softwareversion"
            ),
        ),
        migrations.AlterField(
            model_name="validatedsoftwarelcm",
            name="software",
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to="dcim.softwareversion"),
        ),
        migrations.AlterField(
            model_name="vulnerabilitylcm",
            name="software",
            field=models.ForeignKey(
                blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to="dcim.softwareversion"
            ),
        ),
        migrations.RunPython(migrate_dlm_software_references),
        migrations.RunPython(delete_migrated_dlm_objects),
    ]
