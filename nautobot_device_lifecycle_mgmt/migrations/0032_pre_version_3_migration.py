# Generated by Django 3.2.25 on 2025-03-27 17:05

import django.core.serializers.json
from django.db import migrations, models
import django.db.models.deletion
import nautobot.core.models.fields
import nautobot.extras.models.mixins
import uuid


class Migration(migrations.Migration):

    dependencies = [
        ('extras', '0106_populate_default_statuses_and_roles_for_contact_associations'),
        ('dcim', '0058_controller_data_migration'),
        ('nautobot_device_lifecycle_mgmt', '0031_devicehardwarenoticeresult'),
    ]

    operations = [
        migrations.AlterField(
            model_name='validatedsoftwarelcm',
            name='software',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='dcim.softwareversion'),
        ),
        migrations.CreateModel(
            name='SoftwareLCM',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('created', models.DateTimeField(auto_now_add=True, null=True)),
                ('last_updated', models.DateTimeField(auto_now=True, null=True)),
                ('_custom_field_data', models.JSONField(blank=True, default=dict, encoder=django.core.serializers.json.DjangoJSONEncoder)),
                ('version', models.CharField(max_length=255)),
                ('alias', models.CharField(blank=True, default='', max_length=255)),
                ('release_date', models.DateField(blank=True, null=True)),
                ('end_of_support', models.DateField(blank=True, null=True)),
                ('documentation_url', models.URLField(blank=True)),
                ('long_term_support', models.BooleanField(default=False)),
                ('pre_release', models.BooleanField(default=False)),
                ('migrated_to_core_model_flag', models.BooleanField(default=False)),
                ('device_platform', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dcim.platform')),
                ('migrated_to_core_model', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='dcim.softwareversion')),
                ('tags', nautobot.core.models.fields.TagsField(through='extras.TaggedItem', to='extras.Tag')),
            ],
            options={
                'verbose_name': 'Software',
                'ordering': ('device_platform', 'version', 'end_of_support', 'release_date'),
                'unique_together': {('device_platform', 'version')},
            },
            bases=(models.Model, nautobot.extras.models.mixins.DynamicGroupMixin, nautobot.extras.models.mixins.NotesMixin),
        ),
        migrations.AddField(
            model_name='cvelcm',
            name='old_affected_softwares',
            field=models.ManyToManyField(blank=True, related_name='corresponding_cves', to='nautobot_device_lifecycle_mgmt.SoftwareLCM'),
        ),
        migrations.AddField(
            model_name='devicesoftwarevalidationresult',
            name='old_software',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='nautobot_device_lifecycle_mgmt.softwarelcm'),
        ),
        migrations.AddField(
            model_name='inventoryitemsoftwarevalidationresult',
            name='old_software',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='nautobot_device_lifecycle_mgmt.softwarelcm'),
        ),
        migrations.AddField(
            model_name='validatedsoftwarelcm',
            name='old_software',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='nautobot_device_lifecycle_mgmt.softwarelcm'),
        ),
        migrations.AddField(
            model_name='vulnerabilitylcm',
            name='old_software',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='nautobot_device_lifecycle_mgmt.softwarelcm'),
        ),
        migrations.CreateModel(
            name='SoftwareImageLCM',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('created', models.DateTimeField(auto_now_add=True, null=True)),
                ('last_updated', models.DateTimeField(auto_now=True, null=True)),
                ('_custom_field_data', models.JSONField(blank=True, default=dict, encoder=django.core.serializers.json.DjangoJSONEncoder)),
                ('image_file_name', models.CharField(max_length=255)),
                ('download_url', models.URLField(blank=True)),
                ('image_file_checksum', models.CharField(blank=True, max_length=256)),
                ('hashing_algorithm', models.CharField(blank=True, default='', max_length=255)),
                ('default_image', models.BooleanField(default=False)),
                ('migrated_to_core_model_flag', models.BooleanField(default=False)),
                ('device_types', models.ManyToManyField(blank=True, related_name='software_images', to='dcim.DeviceType')),
                ('inventory_items', models.ManyToManyField(blank=True, related_name='_nautobot_device_lifecycle_mgmt_softwareimagelcm_inventory_items_+', to='dcim.InventoryItem')),
                ('migrated_to_core_model', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='dcim.softwareimagefile')),
                ('object_tags', models.ManyToManyField(blank=True, related_name='_nautobot_device_lifecycle_mgmt_softwareimagelcm_object_tags_+', to='extras.Tag')),
                ('software', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='software_images', to='nautobot_device_lifecycle_mgmt.softwarelcm')),
                ('tags', nautobot.core.models.fields.TagsField(through='extras.TaggedItem', to='extras.Tag')),
            ],
            options={
                'verbose_name': 'Software Image',
                'ordering': ('software', 'default_image', 'image_file_name'),
                'unique_together': {('image_file_name', 'software')},
            },
            bases=(models.Model, nautobot.extras.models.mixins.DynamicGroupMixin, nautobot.extras.models.mixins.NotesMixin),
        ),
        migrations.CreateModel(
            name='ContactLCM',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('created', models.DateTimeField(auto_now_add=True, null=True)),
                ('last_updated', models.DateTimeField(auto_now=True, null=True)),
                ('_custom_field_data', models.JSONField(blank=True, default=dict, encoder=django.core.serializers.json.DjangoJSONEncoder)),
                ('name', models.CharField(max_length=255, null=True)),
                ('address', models.CharField(blank=True, max_length=255)),
                ('phone', models.CharField(blank=True, max_length=255)),
                ('email', models.EmailField(blank=True, max_length=254)),
                ('comments', models.TextField(blank=True, default='')),
                ('priority', models.PositiveIntegerField(default=100)),
                ('type', models.CharField(default='Unassigned', max_length=255)),
                ('migrated_to_core_model_flag', models.BooleanField(default=False)),
                ('contract', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='nautobot_device_lifecycle_mgmt.contractlcm')),
                ('migrated_to_core_model', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='extras.contact')),
                ('tags', nautobot.core.models.fields.TagsField(through='extras.TaggedItem', to='extras.Tag')),
            ],
            options={
                'verbose_name': 'Contract POC',
                'ordering': ('contract', 'priority', 'name'),
                'unique_together': {('contract', 'name')},
            },
            bases=(models.Model, nautobot.extras.models.mixins.DynamicGroupMixin, nautobot.extras.models.mixins.NotesMixin),
        ),
    ]
