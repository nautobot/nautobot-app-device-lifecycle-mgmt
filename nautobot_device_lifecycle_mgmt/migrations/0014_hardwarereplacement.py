# Generated by Django 3.2.16 on 2023-08-14 19:52

import django.core.serializers.json
from django.db import migrations, models
import django.db.models.deletion
import nautobot.extras.models.mixins
import taggit.managers
import uuid


class Migration(migrations.Migration):

    dependencies = [
        ("dcim", "0019_device_redundancy_group_data_migration"),
        ("extras", "0053_relationship_required_on"),
        ("nautobot_device_lifecycle_mgmt", "0013_alter_softwareimagelcm_device_types"),
    ]

    operations = [
        migrations.CreateModel(
            name="HardwareReplacementLCM",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True
                    ),
                ),
                ("created", models.DateField(auto_now_add=True, null=True)),
                ("last_updated", models.DateTimeField(auto_now=True, null=True)),
                (
                    "_custom_field_data",
                    models.JSONField(blank=True, default=dict, encoder=django.core.serializers.json.DjangoJSONEncoder),
                ),
                ("use_case", models.TextField(blank=True, null=True)),
                ("valid_since", models.DateField()),
                ("valid_until", models.DateField(blank=True, null=True)),
                (
                    "current_device_type",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="current_device_type",
                        to="dcim.devicetype",
                    ),
                ),
                (
                    "current_inventory_item",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="current_inventory_item",
                        to="dcim.inventoryitem",
                    ),
                ),
                (
                    "device_roles",
                    models.ManyToManyField(
                        blank=True,
                        related_name="_nautobot_device_lifecycle_mgmt_hardwarereplacementlcm_device_roles_+",
                        to="dcim.DeviceRole",
                    ),
                ),
                (
                    "object_tags",
                    models.ManyToManyField(
                        blank=True,
                        related_name="_nautobot_device_lifecycle_mgmt_hardwarereplacementlcm_object_tags_+",
                        to="extras.Tag",
                    ),
                ),
                (
                    "replacement_device_type",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="replacement_device_type",
                        to="dcim.devicetype",
                    ),
                ),
                (
                    "replacement_inventory_item",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="replacement_inventory_item",
                        to="dcim.inventoryitem",
                    ),
                ),
                ("tags", taggit.managers.TaggableManager(through="extras.TaggedItem", to="extras.Tag")),
            ],
            options={
                "verbose_name": "Hardware Replacement",
            },
            bases=(
                models.Model,
                nautobot.extras.models.mixins.DynamicGroupMixin,
                nautobot.extras.models.mixins.NotesMixin,
            ),
        ),
        migrations.AddConstraint(
            model_name="hardwarereplacementlcm",
            constraint=models.CheckConstraint(
                check=models.Q(
                    models.Q(("current_device_type__isnull", False), ("current_inventory_item__isnull", True)),
                    models.Q(("current_device_type__isnull", True), ("current_inventory_item__isnull", False)),
                    _connector="OR",
                ),
                name="At least one Current item must be selected for Hardware Replacement",
            ),
        ),
        migrations.AddConstraint(
            model_name="hardwarereplacementlcm",
            constraint=models.CheckConstraint(
                check=models.Q(
                    models.Q(("replacement_device_type__isnull", False), ("replacement_inventory_item__isnull", True)),
                    models.Q(("replacement_device_type__isnull", True), ("replacement_inventory_item__isnull", False)),
                    _connector="OR",
                ),
                name="At least one Replacement item must be selected for Hardware Replacement",
            ),
        ),
        migrations.AddConstraint(
            model_name="hardwarereplacementlcm",
            constraint=models.CheckConstraint(
                check=models.Q(
                    models.Q(("current_device_type__isnull", False), ("replacement_device_type__isnull", False)),
                    models.Q(("current_inventory_item__isnull", False), ("replacement_inventory_item__isnull", False)),
                    _connector="OR",
                ),
                name="Current and Replacement products should be of the same type for Hardware Replacement",
            ),
        ),
    ]
