---
name: "CI"
on:  # yamllint disable-line rule:truthy
  - "push"
  - "pull_request"

env:
  PLUGIN_NAME: "nautobot-device-lifecycle-mgmt"

jobs:
  black:
    runs-on: "ubuntu-20.04"
    env:
      INVOKE_NAUTOBOT_DEVICE_LIFECYCLE_MGMT_LOCAL: "True"
    steps:
      - name: "Check out repository code"
        uses: "actions/checkout@v2"
      - name: "Setup environment"
        uses: "networktocode/gh-action-setup-poetry-environment@v2"
      - name: "Linting: black"
        run: "poetry run invoke black"
  bandit:
    runs-on: "ubuntu-20.04"
    env:
      INVOKE_NAUTOBOT_DEVICE_LIFECYCLE_MGMT_LOCAL: "True"
    steps:
      - name: "Check out repository code"
        uses: "actions/checkout@v2"
      - name: "Setup environment"
        uses: "networktocode/gh-action-setup-poetry-environment@v2"
      - name: "Linting: bandit"
        run: "poetry run invoke bandit"
    needs:
      - "black"
  pydocstyle:
    runs-on: "ubuntu-20.04"
    env:
      INVOKE_NAUTOBOT_DEVICE_LIFECYCLE_MGMT_LOCAL: "True"
    steps:
      - name: "Check out repository code"
        uses: "actions/checkout@v2"
      - name: "Setup environment"
        uses: "networktocode/gh-action-setup-poetry-environment@v2"
      - name: "Linting: pydocstyle"
        run: "poetry run invoke pydocstyle"
    needs:
      - "black"
  flake8:
    runs-on: "ubuntu-20.04"
    env:
      INVOKE_NAUTOBOT_DEVICE_LIFECYCLE_MGMT_LOCAL: "True"
    steps:
      - name: "Check out repository code"
        uses: "actions/checkout@v2"
      - name: "Setup environment"
        uses: "networktocode/gh-action-setup-poetry-environment@v2"
      - name: "Linting: flake8"
        run: "poetry run invoke flake8"
    needs:
      - "black"
  yamllint:
    runs-on: "ubuntu-20.04"
    env:
      INVOKE_NAUTOBOT_DEVICE_LIFECYCLE_MGMT_LOCAL: "True"
    steps:
      - name: "Check out repository code"
        uses: "actions/checkout@v2"
      - name: "Setup environment"
        uses: "networktocode/gh-action-setup-poetry-environment@v2"
      - name: "Linting: yamllint"
        run: "poetry run invoke yamllint"
    needs:
      - "black"
  build:
    strategy:
      fail-fast: true
      matrix:
        python-version: ["3.7", "3.8", "3.9"]
        nautobot-version: ["1.1.3"]
    env:
      INVOKE_NAUTOBOT_DEVICE_LIFECYCLE_MGMT_PYTHON_VER: "${{ matrix.python-version }}"
      INVOKE_NAUTOBOT_DEVICE_LIFECYCLE_MGMT_NAUTOBOT_VER: "${{ matrix.nautobot-version }}"
    runs-on: "ubuntu-20.04"
    steps:
      - name: "Check out repository code"
        uses: "actions/checkout@v2"
      - name: "Setup environment"
        uses: "networktocode/gh-action-setup-poetry-environment@v2"
      - name: "Set up Docker Buildx"
        id: "buildx"
        uses: "docker/setup-buildx-action@v1"
      - name: "Build"
        uses: "docker/build-push-action@v2"
        with:
          builder: "${{ steps.buildx.outputs.name }}"
          context: "./"
          push: false
          tags: "${{ env.PLUGIN_NAME }}/nautobot:${{ matrix.nautobot-version }}-py${{ matrix.python-version }}"
          file: "./development/Dockerfile"
          cache-from: "type=gha,scope=${{ matrix.nautobot-version }}-py${{ matrix.python-version }}"
          cache-to: "type=gha,scope=${{ matrix.nautobot-version }}-py${{ matrix.python-version }}"
          outputs: "type=docker,dest=/tmp/${{ env.PLUGIN_NAME }}-${{ matrix.nautobot-version }}-py${{ matrix.python-version }}.tar"
          build-args: |
            NAUTOBOT_VER=${{ matrix.nautobot-version }}
            PYTHON_VER=${{ matrix.python-version }}
      - name: "Upload the docker image"
        uses: "actions/upload-artifact@v2"
        with:
          name: "${{ env.PLUGIN_NAME }}-${{ matrix.nautobot-version }}-py${{ matrix.python-version }}"
          path: "/tmp/${{ env.PLUGIN_NAME }}-${{ matrix.nautobot-version }}-py${{ matrix.python-version }}.tar"
          retention-days: 1
    needs:
      - "bandit"
      - "pydocstyle"
      - "flake8"
      - "yamllint"
  pylint:
    strategy:
      fail-fast: true
      matrix:
        python-version: ["3.7"]
        nautobot-version: ["1.1.3"]
    env:
      INVOKE_NAUTOBOT_DEVICE_LIFECYCLE_MGMT_PYTHON_VER: "${{ matrix.python-version }}"
      INVOKE_NAUTOBOT_DEVICE_LIFECYCLE_MGMT_NAUTOBOT_VER: "${{ matrix.nautobot-version }}"
    runs-on: "ubuntu-20.04"
    steps:
      - name: "Check out repository code"
        uses: "actions/checkout@v2"
      - name: "Setup environment"
        uses: "networktocode/gh-action-setup-poetry-environment@v2"
      - name: "Download the docker image"
        uses: "actions/download-artifact@v2"
        with:
          name: "${{ env.PLUGIN_NAME }}-${{ matrix.nautobot-version }}-py${{ matrix.python-version }}"
          path: "/tmp"
      - name: "Load the image"
        run: "docker load < /tmp/${{ env.PLUGIN_NAME }}-${{ matrix.nautobot-version }}-py${{ matrix.python-version }}.tar"
      - name: "Copy credentials"
        run: "cp development/creds.example.env development/creds.env"
      - name: "Linting: pylint"
        run: "poetry run invoke pylint"
    needs:
      - "build"
  unittest:
    strategy:
      fail-fast: true
      matrix:
        python-version: ["3.7", "3.8", "3.9"]
        nautobot-version: ["1.1.3"]
    runs-on: "ubuntu-20.04"
    env:
      INVOKE_NAUTOBOT_DEVICE_LIFECYCLE_MGMT_PYTHON_VER: "${{ matrix.python-version }}"
      INVOKE_NAUTOBOT_DEVICE_LIFECYCLE_MGMT_NAUTOBOT_VER: "${{ matrix.nautobot-version }}"
    steps:
      - name: "Check out repository code"
        uses: "actions/checkout@v2"
      - name: "Setup environment"
        uses: "networktocode/gh-action-setup-poetry-environment@v2"
      - name: "Download the docker image"
        uses: "actions/download-artifact@v2"
        with:
          name: "${{ env.PLUGIN_NAME }}-${{ matrix.nautobot-version }}-py${{ matrix.python-version }}"
          path: "/tmp"
      - name: "Load the image"
        run: "docker load < /tmp/${{ env.PLUGIN_NAME }}-${{ matrix.nautobot-version }}-py${{ matrix.python-version }}.tar"
      - name: "Copy credentials"
        run: "cp development/creds.example.env development/creds.env"
      - name: "Run Tests"
        run: "poetry run invoke unittest"
    needs:
      - "pylint"
  publish_gh:
    name: "Publish to GitHub"
    runs-on: "ubuntu-20.04"
    if: "startsWith(github.ref, 'refs/tags/v')"
    steps:
      - name: "Check out repository code"
        uses: "actions/checkout@v2"
      - name: "Set up Python"
        uses: "actions/setup-python@v2"
        with:
          python-version: "3.9"
      - name: "Install Python Packages"
        run: "pip install poetry"
      - name: "Set env"
        run: "echo RELEASE_VERSION=${GITHUB_REF:10} >> $GITHUB_ENV"
      - name: "Run Poetry Version"
        run: "poetry version $RELEASE_VERSION"
      - name: "Run Poetry Build"
        run: "poetry build"
      - name: "Upload binaries to release"
        uses: "svenstaro/upload-release-action@v2"
        with:
          repo_token: "${{ secrets.NTC_GITHUB_TOKEN }}"
          file: "dist/*"
          tag: "${{ github.ref }}"
          overwrite: true
          file_glob: true
    needs:
      - "unittest"
  publish_pypi:
    name: "Push Package to PyPI"
    runs-on: "ubuntu-20.04"
    if: "startsWith(github.ref, 'refs/tags/v')"
    steps:
      - name: "Check out repository code"
        uses: "actions/checkout@v2"
      - name: "Set up Python"
        uses: "actions/setup-python@v2"
        with:
          python-version: "3.9"
      - name: "Install Python Packages"
        run: "pip install poetry"
      - name: "Set env"
        run: "echo RELEASE_VERSION=${GITHUB_REF:10} >> $GITHUB_ENV"
      - name: "Run Poetry Version"
        run: "poetry version $RELEASE_VERSION"
      - name: "Run Poetry Build"
        run: "poetry build"
      - name: "Push to PyPI"
        uses: "pypa/gh-action-pypi-publish@release/v1"
        with:
          user: "__token__"
          password: "${{ secrets.PYPI_API_TOKEN }}"
    needs:
      - "unittest"
